# ===========================================
# CATÁLOGO DE PRODUTOS - KUBERNETES MANIFESTS
# ===========================================
# Este arquivo contém todos os recursos necessários para rodar
# a aplicação no Kubernetes (k3s)

---
# NAMESPACE: Cria um espaço isolado para nossa aplicação
apiVersion: v1
kind: Namespace
metadata:
  name: catalogo-produtos
  labels:
    app: catalogo-produtos

---
# SECRET: Armazena senhas de forma segura (codificadas em base64)
# Para gerar base64: echo -n "sua_senha" | base64
apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
  namespace: catalogo-produtos
type: Opaque
data:
  # root = cm9vdA== (base64)
  mysql-root-password: cm9vdA==
  # userpass = dXNlcnBhc3M= (base64)
  mysql-password: dXNlcnBhc3M=

---
# CONFIGMAP: Armazena configurações da aplicação
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: catalogo-produtos
data:
  # Configurações do MySQL
  DB_TYPE: "mysql"
  DB_HOST: "mysql-service"
  DB_PORT: "3306"
  DB_USERNAME: "user"
  DB_NAME: "loja"

  # Configurações do Backend
  PORT: "3000"
  NODE_ENV: "production"
  CORS_ORIGINS: "http://localhost"

---
# PERSISTENT VOLUME CLAIM: Solicita espaço de armazenamento para o MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: catalogo-produtos
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# MYSQL DEPLOYMENT: Define como o MySQL será executado
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: catalogo-produtos
  labels:
    app: mysql
spec:
  replicas: 1  # Apenas 1 instância do MySQL
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-root-password
        - name: MYSQL_DATABASE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: MYSQL_USER
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USERNAME
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: init-script
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: init-script
        hostPath:
          path: /home/biesek/Documentos/projetos/CatalogoProdutos/database
          type: Directory

---
# MYSQL SERVICE: Expõe o MySQL para outros pods
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  namespace: catalogo-produtos
spec:
  selector:
    app: mysql
  ports:
  - port: 3306
    targetPort: 3306
  type: ClusterIP

---
# BACKEND DEPLOYMENT: Define como o backend será executado
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: catalogo-produtos
  labels:
    app: backend
spec:
  replicas: 1  # Pode aumentar para mais instâncias se necessário
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: catalogo-backend:latest
        imagePullPolicy: Never  # Usa imagem local (importante para k3s)
        ports:
        - containerPort: 3000
        env:
        - name: DB_TYPE
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_TYPE
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_PORT
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: mysql-password
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: DB_NAME
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: PORT
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: NODE_ENV
        - name: CORS_ORIGINS
          valueFrom:
            configMapKeyRef:
              name: app-config
              key: CORS_ORIGINS

---
# BACKEND SERVICE: Expõe o backend
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: catalogo-produtos
spec:
  selector:
    app: backend
  ports:
  - port: 3000
    targetPort: 3000
  type: ClusterIP

---
# FRONTEND DEPLOYMENT: Define como o frontend será executado
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: catalogo-produtos
  labels:
    app: frontend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: catalogo-frontend:latest
        imagePullPolicy: Never  # Usa imagem local
        ports:
        - containerPort: 80

---
# FRONTEND SERVICE: Expõe o frontend para acesso externo
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  namespace: catalogo-produtos
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
  type: NodePort
  externalTrafficPolicy: Local